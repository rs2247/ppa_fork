use Mix.Config

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :ppa, Ppa.Endpoint,
  http: [port: {:system, "APP_PORT"}],
  # url: [host: "192.168.32.208", port: 80],
  url: [scheme: "http", host: "farm.lan", port: 80],
  root: ".",
  server: true,
  version: Mix.Project.config[:version]

# Do not print debug messages in production
config :logger, level: :info,
  backends: [{LoggerFileBackend, :error_log }, {LoggerFileBackend, :info_log}, :console]

config :logger, :error_log,
  path: "var/log/error.log",
  format: "$date::$time $metadata[$level] $message\n",
  level: :error,
  metadata: [:user_id, :request_id, :pid]

config :logger, :info_log,
  path: "var/log/info.log",
  format: "$date::$time $metadata[$level] $message\n",
  level: :info,
  metadata: [:user_id, :request_id, :pid]

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :ppa, Ppa.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :ppa, Ppa.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :ppa, Ppa.Endpoint, server: true
#

config :ppa, Ppa.RepoQB,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("BI_DB_USER"),
  password: System.get_env("BI_DB_PASSWORD"),
  database: System.get_env("BI_DB_DATABASE"),
  hostname: System.get_env("BI_DB_HOST"),
  port: System.get_env("BI_DB_PORT"),
  pool_size: 20,
  timeout: 2400000,
  queue_target: 3600000,
  queue_interval: 3600000

config :ppa, Ppa.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("PPA_DB_USER"),
  password: System.get_env("PPA_DB_PASSWORD"),
  database: System.get_env("PPA_DB_DATABASE"),
  hostname: System.get_env("PPA_DB_HOST"),
  port: System.get_env("PPA_DB_PORT"),
  pool_size: 20,
  timeout: 2400000,
  queue_target: 3600000,
  queue_interval: 3600000

config :ppa, Ppa.RepoSpark,
  adapter: Spark.EctoAdapter,
  server: System.get_env("DATABRICKS_SERVER"),
  token: System.get_env("DATABRICKS_TOKEN"),
  path: System.get_env("DATABRICKS_PATH"),
  timeout: 600000,
  queue_target: 3600000,
  queue_interval: 3600000,
  ownership_timeout: 1000,
  pool_size: 5

config :ppa, Ppa.RepoAnalytics,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("ANALYTICS_DB_USER"),
  password: System.get_env("ANALYTICS_DB_PASSWORD"),
  database: System.get_env("ANALYTICS_DB_DATABASE"),
  hostname: System.get_env("ANALYTICS_DB_HOST"),
  port: System.get_env("ANALYTICS_DB_PORT"),
  pool_size: 20,
  timeout: 2400000,
  queue_target: 3600000,
  queue_interval: 3600000

config :ppa, Ppa.RepoPpa,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("RDS_PPA_DB_USER"),
  password: System.get_env("RDS_PPA_DB_PASSWORD"),
  database: System.get_env("RDS_PPA_DB_DATABASE"),
  hostname: System.get_env("RDS_PPA_DB_HOST"),
  port: System.get_env("RDS_PPA_DB_PORT"),
  pool_size: 20,
  timeout: 2400000,
  queue_target: 3600000,
  queue_interval: 3600000


# Finally import the config/prod.secret.exs
# which should be versioned separately.
import_config "*/database.exs"
